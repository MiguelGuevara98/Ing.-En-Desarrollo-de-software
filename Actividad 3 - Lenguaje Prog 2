#include <windows.h>
#include <sql.h>
#include <sqlext.h>
#include <iostream>
#include <iomanip>

using namespace std;

int main() {
    SQLHENV hEnv;
    SQLHDBC hDbc;
    SQLHSTMT hStmt;
    SQLRETURN ret;

    // Asignar un gestor de entorno
    ret = SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
    ret = SQLSetEnvAttr(hEnv, SQL_ATTR_ODBC_VERSION, (SQLPOINTER)SQL_OV_ODBC3, 0);

    // Asignar un gestor de conexión
    ret = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);

    // Conectarse a la base de datos
    ret = SQLConnect(hDbc, (SQLWCHAR*)L"sqlserver", SQL_NTS, (SQLWCHAR*)L"Username", SQL_NTS, (SQLWCHAR*)L"Password", SQL_NTS);

    if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {
        cout << "Conectado a la base de datos exitosamente." << endl;

        ret = SQLAllocHandle(SQL_HANDLE_STMT, hDbc, &hStmt);

        // Ejecutar consulta
        ret = SQLExecDirect(hStmt, (SQLWCHAR*)L"SELECT * FROM Empleados", SQL_NTS);
        if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO) {
            wcout << L"Error al ejecutar la consulta." << endl;
            SQLFreeHandle(SQL_HANDLE_STMT, hStmt);
            return EXIT_FAILURE;
        }   

        // Mostrar encabezados
        wcout << L"+------+------------------------------+-------------------+-------------------+-------------------+-------------------------+--------------------------------------------------------+----------+" << endl;
        wcout << L"| No.  | Nombre completo              | Fecha Nacimiento  | RFC               | Centro de Trabajo | Puesto                  | Descripción                                            | Directivo|" << endl;
        wcout << L"+------+------------------------------+-------------------+-------------------+-------------------+-------------------------+--------------------------------------------------------+----------+" << endl;

        // Buffers inicializados
        int num_empleado;
        SQLWCHAR name[101] = { 0 };
        SQLWCHAR last_name[101] = { 0 };
        SQLWCHAR slast_name[101] = { 0 };
        SQLWCHAR Birthday[101] = { 0 };
        SQLWCHAR RFC[101] = { 0 };
        SQLWCHAR CentroTrabajo[101] = { 0 };
        SQLWCHAR Puesto[101] = { 0 };
        SQLWCHAR DescripcionPuesto[201] = { 0 };
        SQLWCHAR directivos[101] = { 0 };

        // Leer y procesar filas
        int rowCount = 0;
        while (SQLFetch(hStmt) == SQL_SUCCESS) {
            rowCount++;
            SQLGetData(hStmt, 1, SQL_C_LONG, &num_empleado, 0, NULL);
            SQLGetData(hStmt, 2, SQL_C_WCHAR, name, sizeof(name), NULL);
            SQLGetData(hStmt, 3, SQL_C_WCHAR, last_name, sizeof(last_name), NULL);
            SQLGetData(hStmt, 4, SQL_C_WCHAR, slast_name, sizeof(slast_name), NULL);
            SQLGetData(hStmt, 5, SQL_C_WCHAR, Birthday, sizeof(Birthday), NULL);
            SQLGetData(hStmt, 6, SQL_C_WCHAR, RFC, sizeof(RFC), NULL);
            SQLGetData(hStmt, 7, SQL_C_WCHAR, CentroTrabajo, sizeof(CentroTrabajo), NULL);
            SQLGetData(hStmt, 8, SQL_C_WCHAR, Puesto, sizeof(Puesto), NULL);
            SQLGetData(hStmt, 9, SQL_C_WCHAR, DescripcionPuesto, sizeof(DescripcionPuesto), NULL);
            SQLGetData(hStmt, 10, SQL_C_WCHAR, directivos, sizeof(directivos), NULL);

            // Procesar el valor de directivo
            wstring directivo_str = (wstring(directivos) == L"1") ? L"Sí" : L"No";

            // Mostrar datos
            wcout << L"|" << setw(6) << left << num_empleado
                << L"|" << setw(30) << left << (wstring(name) + L" " + wstring(last_name) + L" " + wstring(slast_name))
                << L"|" << setw(19) << left << Birthday
                << L"|" << setw(19) << left << RFC
                << L"|" << setw(19) << left << CentroTrabajo
                << L"|" << setw(25) << left << Puesto
                << L"|" << setw(56) << left << DescripcionPuesto
                << L"|" << setw(10) << left << directivo_str << L"|" << endl;
        }

        if (rowCount == 0) {
            wcout << L"No se encontraron datos en la tabla Empleados." << endl;
        }

        // Cerrar tabla
        wcout << L"+------+------------------------------+-------------------+-------------------+-------------------+-------------------------+--------------------------------------------------------+----------+" << endl;

        SQLFreeHandle(SQL_HANDLE_STMT, hStmt);
    }
    else {
        cout << "Fallo la conexión a la base de datos." << endl;
    }

    // Liberar recursos
    SQLDisconnect(hDbc);
    SQLFreeHandle(SQL_HANDLE_DBC, hDbc);
    SQLFreeHandle(SQL_HANDLE_ENV, hEnv);

    return 0;
}
